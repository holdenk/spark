== Physical Plan ==
TakeOrderedAndProject (68)
+- * HashAggregate (67)
   +- Exchange (66)
      +- * HashAggregate (65)
         +- * Project (64)
            +- * SortMergeJoin LeftOuter (63)
               :- * Sort (56)
               :  +- * Project (55)
               :     +- * BroadcastHashJoin LeftOuter BuildRight (54)
               :        :- * Project (49)
               :        :  +- * SortMergeJoin Inner (48)
               :        :     :- * Sort (36)
               :        :     :  +- * Project (35)
               :        :     :     +- * BroadcastHashJoin Inner BuildRight (34)
               :        :     :        :- * Project (32)
               :        :     :        :  +- * SortMergeJoin Inner (31)
               :        :     :        :     :- * Sort (25)
               :        :     :        :     :  +- Exchange (24)
               :        :     :        :     :     +- * Project (23)
               :        :     :        :     :        +- * BroadcastHashJoin Inner BuildRight (22)
               :        :     :        :     :           :- * Project (17)
               :        :     :        :     :           :  +- * BroadcastHashJoin Inner BuildRight (16)
               :        :     :        :     :           :     :- * Project (10)
               :        :     :        :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
               :        :     :        :     :           :     :     :- * Filter (3)
               :        :     :        :     :           :     :     :  +- * ColumnarToRow (2)
               :        :     :        :     :           :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (1)
               :        :     :        :     :           :     :     +- BroadcastExchange (8)
               :        :     :        :     :           :     :        +- * Project (7)
               :        :     :        :     :           :     :           +- * Filter (6)
               :        :     :        :     :           :     :              +- * ColumnarToRow (5)
               :        :     :        :     :           :     :                 +- Scan parquet spark_catalog.default.household_demographics (4)
               :        :     :        :     :           :     +- BroadcastExchange (15)
               :        :     :        :     :           :        +- * Project (14)
               :        :     :        :     :           :           +- * Filter (13)
               :        :     :        :     :           :              +- * ColumnarToRow (12)
               :        :     :        :     :           :                 +- Scan parquet spark_catalog.default.customer_demographics (11)
               :        :     :        :     :           +- BroadcastExchange (21)
               :        :     :        :     :              +- * Filter (20)
               :        :     :        :     :                 +- * ColumnarToRow (19)
               :        :     :        :     :                    +- Scan parquet spark_catalog.default.date_dim (18)
               :        :     :        :     +- * Sort (30)
               :        :     :        :        +- Exchange (29)
               :        :     :        :           +- * Filter (28)
               :        :     :        :              +- * ColumnarToRow (27)
               :        :     :        :                 +- Scan parquet spark_catalog.default.item (26)
               :        :     :        +- ReusedExchange (33)
               :        :     +- * Sort (47)
               :        :        +- Exchange (46)
               :        :           +- * Project (45)
               :        :              +- * BroadcastHashJoin Inner BuildRight (44)
               :        :                 :- * Filter (39)
               :        :                 :  +- * ColumnarToRow (38)
               :        :                 :     +- Scan parquet spark_catalog.default.inventory (37)
               :        :                 +- BroadcastExchange (43)
               :        :                    +- * Filter (42)
               :        :                       +- * ColumnarToRow (41)
               :        :                          +- Scan parquet spark_catalog.default.warehouse (40)
               :        +- BroadcastExchange (53)
               :           +- * Filter (52)
               :              +- * ColumnarToRow (51)
               :                 +- Scan parquet spark_catalog.default.promotion (50)
               +- * Sort (62)
                  +- Exchange (61)
                     +- * Project (60)
                        +- * Filter (59)
                           +- * ColumnarToRow (58)
                              +- Scan parquet spark_catalog.default.catalog_returns (57)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#8), dynamicpruningexpression(cs_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hdemo_sk), IsNotNull(cs_ship_date_sk)]
ReadSchema: struct<cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int>

(2) ColumnarToRow [codegen id : 4]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]

(3) Filter [codegen id : 4]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Condition : ((((isnotnull(cs_quantity#7) AND isnotnull(cs_item_sk#4)) AND isnotnull(cs_bill_cdemo_sk#2)) AND isnotnull(cs_bill_hdemo_sk#3)) AND isnotnull(cs_ship_date_sk#1))

(4) Scan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#10, hd_buy_potential#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,1001-5000      ), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [hd_demo_sk#10, hd_buy_potential#11]

(6) Filter [codegen id : 1]
Input [2]: [hd_demo_sk#10, hd_buy_potential#11]
Condition : ((isnotnull(hd_buy_potential#11) AND (hd_buy_potential#11 = 1001-5000      )) AND isnotnull(hd_demo_sk#10))

(7) Project [codegen id : 1]
Output [1]: [hd_demo_sk#10]
Input [2]: [hd_demo_sk#10, hd_buy_potential#11]

(8) BroadcastExchange
Input [1]: [hd_demo_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#10]
Join type: Inner
Join condition: None

(10) Project [codegen id : 4]
Output [7]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Input [9]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, hd_demo_sk#10]

(11) Scan parquet spark_catalog.default.customer_demographics
Output [2]: [cd_demo_sk#12, cd_marital_status#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,M), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [cd_demo_sk#12, cd_marital_status#13]

(13) Filter [codegen id : 2]
Input [2]: [cd_demo_sk#12, cd_marital_status#13]
Condition : ((isnotnull(cd_marital_status#13) AND (cd_marital_status#13 = M)) AND isnotnull(cd_demo_sk#12))

(14) Project [codegen id : 2]
Output [1]: [cd_demo_sk#12]
Input [2]: [cd_demo_sk#12, cd_marital_status#13]

(15) BroadcastExchange
Input [1]: [cd_demo_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#12]
Join type: Inner
Join condition: None

(17) Project [codegen id : 4]
Output [6]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, cd_demo_sk#12]

(18) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#14, d_date#15]

(20) Filter [codegen id : 3]
Input [2]: [d_date_sk#14, d_date#15]
Condition : (isnotnull(d_date#15) AND isnotnull(d_date_sk#14))

(21) BroadcastExchange
Input [2]: [d_date_sk#14, d_date#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_ship_date_sk#1]
Right keys [1]: [d_date_sk#14]
Join type: Inner
Join condition: None

(23) Project [codegen id : 4]
Output [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#15]
Input [8]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date_sk#14, d_date#15]

(24) Exchange
Input [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#15]
Arguments: rangepartitioning(cs_item_sk#4 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(25) Sort [codegen id : 5]
Input [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#15]
Arguments: [cs_item_sk#4 ASC NULLS FIRST], false, 0

(26) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#16, i_item_desc#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(27) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#16, i_item_desc#17]

(28) Filter [codegen id : 6]
Input [2]: [i_item_sk#16, i_item_desc#17]
Condition : isnotnull(i_item_sk#16)

(29) Exchange
Input [2]: [i_item_sk#16, i_item_desc#17]
Arguments: rangepartitioning(i_item_sk#16 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(30) Sort [codegen id : 7]
Input [2]: [i_item_sk#16, i_item_desc#17]
Arguments: [i_item_sk#16 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#16]
Join type: Inner
Join condition: None

(32) Project [codegen id : 10]
Output [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#15, i_item_desc#17]
Input [8]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#15, i_item_sk#16, i_item_desc#17]

(33) ReusedExchange [Reuses operator id: 79]
Output [4]: [d_date_sk#18, d_date#19, d_week_seq#20, d_date_sk#21]

(34) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#8]
Right keys [1]: [d_date_sk#18]
Join type: Inner
Join condition: (d_date#15 > date_add(d_date#19, 5))

(35) Project [codegen id : 10]
Output [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, i_item_desc#17, d_week_seq#20, d_date_sk#21]
Input [11]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#15, i_item_desc#17, d_date_sk#18, d_date#19, d_week_seq#20, d_date_sk#21]

(36) Sort [codegen id : 10]
Input [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, i_item_desc#17, d_week_seq#20, d_date_sk#21]
Arguments: [cs_item_sk#4 ASC NULLS FIRST, d_date_sk#21 ASC NULLS FIRST], false, 0

(37) Scan parquet spark_catalog.default.inventory
Output [4]: [inv_item_sk#22, inv_warehouse_sk#23, inv_quantity_on_hand#24, inv_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#25), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(38) ColumnarToRow [codegen id : 12]
Input [4]: [inv_item_sk#22, inv_warehouse_sk#23, inv_quantity_on_hand#24, inv_date_sk#25]

(39) Filter [codegen id : 12]
Input [4]: [inv_item_sk#22, inv_warehouse_sk#23, inv_quantity_on_hand#24, inv_date_sk#25]
Condition : ((isnotnull(inv_quantity_on_hand#24) AND isnotnull(inv_item_sk#22)) AND isnotnull(inv_warehouse_sk#23))

(40) Scan parquet spark_catalog.default.warehouse
Output [2]: [w_warehouse_sk#26, w_warehouse_name#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(41) ColumnarToRow [codegen id : 11]
Input [2]: [w_warehouse_sk#26, w_warehouse_name#27]

(42) Filter [codegen id : 11]
Input [2]: [w_warehouse_sk#26, w_warehouse_name#27]
Condition : isnotnull(w_warehouse_sk#26)

(43) BroadcastExchange
Input [2]: [w_warehouse_sk#26, w_warehouse_name#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(44) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [inv_warehouse_sk#23]
Right keys [1]: [w_warehouse_sk#26]
Join type: Inner
Join condition: None

(45) Project [codegen id : 12]
Output [4]: [inv_item_sk#22, inv_quantity_on_hand#24, inv_date_sk#25, w_warehouse_name#27]
Input [6]: [inv_item_sk#22, inv_warehouse_sk#23, inv_quantity_on_hand#24, inv_date_sk#25, w_warehouse_sk#26, w_warehouse_name#27]

(46) Exchange
Input [4]: [inv_item_sk#22, inv_quantity_on_hand#24, inv_date_sk#25, w_warehouse_name#27]
Arguments: rangepartitioning(inv_item_sk#22 ASC NULLS FIRST, inv_date_sk#25 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(47) Sort [codegen id : 13]
Input [4]: [inv_item_sk#22, inv_quantity_on_hand#24, inv_date_sk#25, w_warehouse_name#27]
Arguments: [inv_item_sk#22 ASC NULLS FIRST, inv_date_sk#25 ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 15]
Left keys [2]: [cs_item_sk#4, d_date_sk#21]
Right keys [2]: [inv_item_sk#22, inv_date_sk#25]
Join type: Inner
Join condition: (inv_quantity_on_hand#24 < cs_quantity#7)

(49) Project [codegen id : 15]
Output [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#27, i_item_desc#17, d_week_seq#20]
Input [11]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, i_item_desc#17, d_week_seq#20, d_date_sk#21, inv_item_sk#22, inv_quantity_on_hand#24, inv_date_sk#25, w_warehouse_name#27]

(50) Scan parquet spark_catalog.default.promotion
Output [1]: [p_promo_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(51) ColumnarToRow [codegen id : 14]
Input [1]: [p_promo_sk#28]

(52) Filter [codegen id : 14]
Input [1]: [p_promo_sk#28]
Condition : isnotnull(p_promo_sk#28)

(53) BroadcastExchange
Input [1]: [p_promo_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(54) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [cs_promo_sk#5]
Right keys [1]: [p_promo_sk#28]
Join type: LeftOuter
Join condition: None

(55) Project [codegen id : 15]
Output [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#27, i_item_desc#17, d_week_seq#20]
Input [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#27, i_item_desc#17, d_week_seq#20, p_promo_sk#28]

(56) Sort [codegen id : 15]
Input [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#27, i_item_desc#17, d_week_seq#20]
Arguments: [cs_item_sk#4 ASC NULLS FIRST, cs_order_number#6 ASC NULLS FIRST], false, 0

(57) Scan parquet spark_catalog.default.catalog_returns
Output [3]: [cr_item_sk#29, cr_order_number#30, cr_returned_date_sk#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(58) ColumnarToRow [codegen id : 16]
Input [3]: [cr_item_sk#29, cr_order_number#30, cr_returned_date_sk#31]

(59) Filter [codegen id : 16]
Input [3]: [cr_item_sk#29, cr_order_number#30, cr_returned_date_sk#31]
Condition : (isnotnull(cr_item_sk#29) AND isnotnull(cr_order_number#30))

(60) Project [codegen id : 16]
Output [2]: [cr_item_sk#29, cr_order_number#30]
Input [3]: [cr_item_sk#29, cr_order_number#30, cr_returned_date_sk#31]

(61) Exchange
Input [2]: [cr_item_sk#29, cr_order_number#30]
Arguments: rangepartitioning(cr_item_sk#29 ASC NULLS FIRST, cr_order_number#30 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(62) Sort [codegen id : 17]
Input [2]: [cr_item_sk#29, cr_order_number#30]
Arguments: [cr_item_sk#29 ASC NULLS FIRST, cr_order_number#30 ASC NULLS FIRST], false, 0

(63) SortMergeJoin [codegen id : 18]
Left keys [2]: [cs_item_sk#4, cs_order_number#6]
Right keys [2]: [cr_item_sk#29, cr_order_number#30]
Join type: LeftOuter
Join condition: None

(64) Project [codegen id : 18]
Output [3]: [w_warehouse_name#27, i_item_desc#17, d_week_seq#20]
Input [7]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#27, i_item_desc#17, d_week_seq#20, cr_item_sk#29, cr_order_number#30]

(65) HashAggregate [codegen id : 18]
Input [3]: [w_warehouse_name#27, i_item_desc#17, d_week_seq#20]
Keys [3]: [i_item_desc#17, w_warehouse_name#27, d_week_seq#20]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#32]
Results [4]: [i_item_desc#17, w_warehouse_name#27, d_week_seq#20, count#33]

(66) Exchange
Input [4]: [i_item_desc#17, w_warehouse_name#27, d_week_seq#20, count#33]
Arguments: hashpartitioning(i_item_desc#17, w_warehouse_name#27, d_week_seq#20, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(67) HashAggregate [codegen id : 19]
Input [4]: [i_item_desc#17, w_warehouse_name#27, d_week_seq#20, count#33]
Keys [3]: [i_item_desc#17, w_warehouse_name#27, d_week_seq#20]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#34]
Results [6]: [i_item_desc#17, w_warehouse_name#27, d_week_seq#20, count(1)#34 AS no_promo#35, count(1)#34 AS promo#36, count(1)#34 AS total_cnt#37]

(68) TakeOrderedAndProject
Input [6]: [i_item_desc#17, w_warehouse_name#27, d_week_seq#20, no_promo#35, promo#36, total_cnt#37]
Arguments: 100, [total_cnt#37 DESC NULLS LAST, i_item_desc#17 ASC NULLS FIRST, w_warehouse_name#27 ASC NULLS FIRST, d_week_seq#20 ASC NULLS FIRST], [i_item_desc#17, w_warehouse_name#27, d_week_seq#20, no_promo#35, promo#36, total_cnt#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (79)
+- * Project (78)
   +- * BroadcastHashJoin Inner BuildLeft (77)
      :- BroadcastExchange (73)
      :  +- * Project (72)
      :     +- * Filter (71)
      :        +- * ColumnarToRow (70)
      :           +- Scan parquet spark_catalog.default.date_dim (69)
      +- * Filter (76)
         +- * ColumnarToRow (75)
            +- Scan parquet spark_catalog.default.date_dim (74)


(69) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_date_sk#18, d_date#19, d_week_seq#20, d_year#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(d_date)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>

(70) ColumnarToRow [codegen id : 1]
Input [4]: [d_date_sk#18, d_date#19, d_week_seq#20, d_year#38]

(71) Filter [codegen id : 1]
Input [4]: [d_date_sk#18, d_date#19, d_week_seq#20, d_year#38]
Condition : ((((isnotnull(d_year#38) AND (d_year#38 = 2001)) AND isnotnull(d_date_sk#18)) AND isnotnull(d_week_seq#20)) AND isnotnull(d_date#19))

(72) Project [codegen id : 1]
Output [3]: [d_date_sk#18, d_date#19, d_week_seq#20]
Input [4]: [d_date_sk#18, d_date#19, d_week_seq#20, d_year#38]

(73) BroadcastExchange
Input [3]: [d_date_sk#18, d_date#19, d_week_seq#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [plan_id=11]

(74) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#21, d_week_seq#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(75) ColumnarToRow
Input [2]: [d_date_sk#21, d_week_seq#39]

(76) Filter
Input [2]: [d_date_sk#21, d_week_seq#39]
Condition : (isnotnull(d_week_seq#39) AND isnotnull(d_date_sk#21))

(77) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_week_seq#20]
Right keys [1]: [d_week_seq#39]
Join type: Inner
Join condition: None

(78) Project [codegen id : 2]
Output [4]: [d_date_sk#18, d_date#19, d_week_seq#20, d_date_sk#21]
Input [5]: [d_date_sk#18, d_date#19, d_week_seq#20, d_date_sk#21, d_week_seq#39]

(79) BroadcastExchange
Input [4]: [d_date_sk#18, d_date#19, d_week_seq#20, d_date_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]


